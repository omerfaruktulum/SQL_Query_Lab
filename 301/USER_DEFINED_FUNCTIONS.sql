-- SCALAR VALUED FUNCTIONS

-- CREATE FUNCTION DBO.TOPLA ( @SAYI1 AS INT,@SAYI2 AS INT)
-- AS
-- RETURNS INT
-- BEGIN 
-- DECLARE @SONUC AS INT
-- SET @SONUC =@SAYI1 + @SAYI2
-- RETURN @SONUC
-- END


-- CREATE FUNCTION DBO.DORTISLEM(@SAYI1 AS INT,@SAYI2 AS INT ,@ISLEM AS VARCHAR(10))
-- RETURNS FLOAT
-- AS
-- BEGIN
--     DECLARE @SONUC AS FLOAT
--     IF @ISLEM = 'TOPLA'
--     SET @SONUC= @SAYI1 + @SAYI2
--     IF @ISLEM = 'ÇARP'
--     SET @SONUC= @SAYI1 * @SAYI2
--     IF @ISLEM = 'ÇIKAR'
--     SET @SONUC= @SAYI1 - @SAYI2
--     IF @ISLEM = 'BOL'
--     SET @SONUC= @SAYI1 / CONVERT(float,@SAYI2)
--     RETURN @SONUC
-- END

-- SELECT DBO.DORTISLEM(20,30,'TOPLA')

-- CREATE FUNCTION DBO.GETMONTHNAME(@DATE AS DATETIME)
-- RETURNS VARCHAR(10)
-- BEGIN
-- DECLARE @RESULT AS VARCHAR(10)
-- IF MONTH(@DATE) = 1
--  SET @RESULT ='01OCK'
--  IF MONTH(@DATE) = 2
--  SET @RESULT ='02SUB'
--  IF MONTH(@DATE) = 3
--  SET @RESULT ='02MAR'
--  IF MONTH(@DATE) = 4
--  SET @RESULT ='04NIS'
--  IF MONTH(@DATE) = 5
--  SET @RESULT ='05MAY'
--  IF MONTH(@DATE) = 6
--  SET @RESULT ='06HAZ'
--  IF MONTH(@DATE) = 7
--  SET @RESULT ='07TEM'
--  IF MONTH(@DATE) = 8
--  SET @RESULT ='08AGU'
--  IF MONTH(@DATE) = 9
--  SET @RESULT ='08EYL'
--  IF MONTH(@DATE) = 10
--  SET @RESULT ='10EKI'
--  IF MONTH(@DATE) = 11
--  SET @RESULT ='11KAS'
--  IF MONTH(@DATE) = 12
--  SET @RESULT ='12ARA'

--  RETURN @RESULT
-- END

-- SELECT DBO.GETMONTHNAME('2022-12-1')


-- -- JOIN YONTEMI
-- SELECT I.ID , I.ITEMCODE,I.ITEMNAME,I.UNITPRICE,
-- SUM(OD.LINETOTAL), SUM(OD.AMOUNT),
-- MIN(I.UNITPRICE) MINFIYAT,MAX(I.UNITPRICE) MAXFIYAT,
-- AVG(I.UNITPRICE) ORTALAMAFIYAT
--   FROM ITEMS I JOIN ORDERDETAILS OD ON OD.ITEMID= I.ID
--   GROUP BY I.ID , I.ITEMCODE,I.ITEMNAME,I.UNITPRICE

--   -- SUBQUERY YONTEMI
-- SELECT I.ID , I.ITEMCODE,I.ITEMNAME,I.UNITPRICE,
-- (SELECT SUM(OD.LINETOTAL)  FROM ORDERDETAILS OD WHERE OD.ITEMID=I.ID) TOPLAMCIRO,(SELECT  SUM(OD.AMOUNT) FROM ORDERDETAILS OD WHERE OD.ITEMID = I.ID) TOPLAMMIKTAR
--   FROM ITEMS I
--  ORDER BY 1

-- FONKSIYON YONTEMI

-- CREATE FUNCTION DBO.GETITEMSALES(@ITEMID AS INT)
--  RETURNS  FLOAT
--  AS 
--  BEGIN
--     DECLARE @RESULT AS FLOAT
--     SELECT @RESULT = SUM(LINETOTAL)
--     FROM ORDERDETAILS
--     WHERE ITEMID=@ITEMID
--     RETURN @RESULT
--  END


-- CREATE FUNCTION DBO.GETITEMSALES_AMOUNT(@ITEMID AS INT)
--  RETURNS  FLOAT
--  AS 
--  BEGIN
--     DECLARE @RESULT AS FLOAT
--     SELECT @RESULT = SUM(AMOUNT)
--     FROM ORDERDETAILS
--     WHERE ITEMID=@ITEMID
--     RETURN @RESULT
--  END

-- FONKSIYON KULLANIMI
-- SCALER VALUED FUNCTIONS

-- SELECT I.ID , I.ITEMCODE, I.ITEMNAME, I.UNITPRICE,
--     DBO.GETITEMSALES(I.ID), DBO.GETITEMSALES_AMOUNT(I.ID)
-- FROM ITEMS I  

-- CREATE FUNCTION DBO.GETITEMSALES_MINPRICE(@ITEMID AS INT)
--  RETURNS  FLOAT
--  AS 
--  BEGIN
--     DECLARE @RESULT AS FLOAT
--     SELECT @RESULT = MIN(UNITPRICE)
--     FROM ORDERDETAILS
--     WHERE ITEMID=@ITEMID
--     RETURN @RESULT
--  END

-- CREATE FUNCTION DBO.GETITEMSALES_MAXPRICE(@ITEMID AS INT)
--  RETURNS  FLOAT
--  AS 
--  BEGIN
--     DECLARE @RESULT AS FLOAT
--     SELECT @RESULT = MAX(UNITPRICE)
--     FROM ORDERDETAILS
--     WHERE ITEMID=@ITEMID
--     RETURN @RESULT
--  END


-- ALTER FUNCTION DBO.GETITEMSALES_AVGPRICE(@ITEMID AS INT)
--  RETURNS  FLOAT
--  AS 
--  BEGIN
--     DECLARE @RESULT AS FLOAT
--     SELECT @RESULT = AVG(UNITPRICE)
--     FROM ORDERDETAILS
--     WHERE ITEMID=@ITEMID
--     RETURN @RESULT
--  END


-- SELECT I.ID , I.ITEMCODE, I.ITEMNAME, I.UNITPRICE,
--     DBO.GETITEMSALES(I.ID), DBO.GETITEMSALES_AMOUNT(I.ID),
--     DBO.GETITEMSALES_MINPRICE(I.ID) MINPRICE ,
--         DBO.GETITEMSALES_MAXPRICE(I.ID) MAXPRICE ,
--             DBO.GETITEMSALES_AVGPRICE(I.ID)
-- FROM ITEMS I  

-- TABLE VALUED FUNCTION YONTEMI

-- CREATE FUNCTION DBO.FNITEMINFO(@ITEMID AS INT)
-- RETURNS TABLE
-- AS RETURN(
--     SELECT  I.ITEMCODE,I.ITEMNAME,SUM(OD.LINETOTAL) TOTALSALE,
--     SUM(OD.AMOUNT) TOTALAMOUNT,MIN(OD.UNITPRICE) MINPRICE,MAX(OD.UNITPRICE) MAXPRICE,
--     AVG(OD.UNITPRICE) AVGPRICE FROM ITEMS I JOIN ORDERDETAILS OD ON OD.ITEMID = I.ID 
--     GROUP BY I.ITEMCODE,I.ITEMNAME

-- )

SELECT I.ID , I.ITEMCODE, I.ITEMNAME, I.UNITPRICE,
INFO.TOTALSALE TOPLAMCIRO,INFO.TOTALAMOUNT TOPLAMADET,INFO.MINPRICE ENDUSUKFIYAT,
INFO.MAXPRICE ENYUKSEKFIYAT,INFO.AVGPRICE ORTALAMAFIYAT

FROM ITEMS I 
CROSS APPLY (SELECT * FROM DBO.FNITEMINFO(I.ID)) INFO
ORDER BY 1

SELECT * FROM DBO.FNITEMINFO(2)

-- ALTER FUNCTION DBO.FNITEMINFO2 (@ITEMID AS INT)
-- RETURNS 
-- @RESULT TABLE
-- (
--     ITEMCODE  varchar(100),
--     ITEMNAME  varchar(100),
--     TOTALSALE FLOAT,
--     TOTALAMOUNT INT ,
--     MINPRICE INT,
--     MAXPRICE FLOAT,
--     AVGPRICE FLOAT,
--     TOTALSALEUSD FLOAT
-- )
-- AS 
-- BEGIN
--     INSERT INTO @RESULT(ITEMCODE ,ITEMNAME ,TOTALSALE ,TOTALAMOUNT ,MINPRICE ,MAXPRICE ,AVGPRICE  )
    
    
--     SELECT I.ITEMCODE ITEMCODE, I.ITEMNAME ITEMNAME, SUM(OD.LINETOTAL) TOTALSALE,
--         SUM(OD.AMOUNT) TOTALAMOUNT, MIN(OD.UNITPRICE) MINPRICE, MAX(OD.UNITPRICE) MAXPRICE,
--         AVG(OD.UNITPRICE) AVGPRICE
--     FROM ITEMS I JOIN ORDERDETAILS OD ON OD.ITEMID = I.ID
--     WHERE I.ID=@ITEMID
--     GROUP BY I.ITEMCODE,I.ITEMNAME
--     UPDATE @RESULT SET TOTALSALEUSD=TOTALSALE/40
--     RETURN
-- END

-- SELECT * FROM DBO.FNITEMINFO2(1)


-- ALISTIRMA 1

-- CREATE FUNCTION DBO.YASGETIR(@BIRTHDATE AS DATE)
-- RETURNS INT
-- AS 
-- BEGIN 
-- RETURN  DATEDIFF(YEAR,@BIRTHDATE,GETDATE())
-- END

-- SELECT DBO.YASGETIR('1990-01-01')


-- ALISTIRMA 2 

-- CREATE FUNCTION DBO.YASGRUBUGETIR(@BIRTHDATE AS DATE)
-- RETURNS VARCHAR (50)
-- AS 
-- BEGIN 
-- DECLARE @AGEGROUP AS VARCHAR(50)
-- DECLARE @AGE AS INT
-- SET @AGE = DATEDIFF(YEAR,@BIRTHDATE,GETDATE())
 
-- IF @AGE < 20 
-- SET @AGEGROUP = '20 DEN KUCUK'
-- IF @AGE BETWEEN 20 AND 29 
-- SET @AGEGROUP = '20-29 ARASI'
-- IF @AGE BETWEEN 30 AND 40 
-- SET @AGEGROUP = '30-40 ARASI'
-- IF @AGE > 40 
-- SET @AGEGROUP = '40 TAN BUYUK '

-- RETURN @AGEGROUP

-- END

-- SELECT DBO.YASGRUBUGETIR('1994-11-18')

-- ALISTIRMA 3

-- CREATE FUNCTION DBO.GET_AGEINFO(@BIRTHDATE AS DATE)
-- RETURNS  TABLE
-- AS 
-- RETURN(
-- SELECT DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) AGE,
-- CASE
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) < 20 THEN '20 DEN KUCUK'
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) BETWEEN 20 AND 30 THEN '20-30 ARASI'
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) BETWEEN 31 AND 40 THEN '31-40 ARASI'
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) >40 THEN '40 DAN BUYUK'
-- END AS AGEGROUP

-- )

-- SELECT * FROM DBO.GET_AGEINFO('1990-01-01')

-- SELECT * ,
-- (SELECT AGE FROM DBO.GET_AGEINFO(BIRTHDATE)) AGE,
-- (SELECT AGEGROUP FROM DBO.GET_AGEINFO(BIRTHDATE)) AGEGROUP
-- FROM PLAYER

-- SELECT P.*,A.AGE,A.AGEGROUP FROM PLAYERS P CROSS APPLY
-- (SELECT * FROM DBO.GET_AGEINFO(P.BIRTHDATE)) A

-- ALISTIRMA 4 
-- NORMAL COZUM
-- SELECT * ,
-- DATEDIFF(YEAR,BIRTHDATE,GETDATE()),
-- CASE
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) < 20 THEN '20 DEN KUCUK'
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) BETWEEN 20 AND 30 THEN '20-30 ARASI'
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) BETWEEN 31 AND 40 THEN '31-40 ARASI'
-- WHEN DATEDIFF(YEAR,@BIRTHDATE,GETDATE()) >40 THEN '40 DAN BUYUK'
-- END AS AGEGROUP,

-- (SELECT COUNT(*) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID AND PLAYERTYPE='BACKUP')  BACKUPCOUNT ,
-- (SELECT COUNT(*) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID AND PLAYERTYPE='REAL')  REALCOUNT ,
-- (SELECT COUNT(DISTINCT TEAM) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID )  TEAMCOUNT ,
-- (SELECT COUNT(*) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID )  MATCHCOUNT ,
-- (SELECT DATEDIFF(YEAR,MIN(DATE_),MAX(DATE_)) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID )  PLAYINGYEAR ,


-- FROM PLAYER P 
-- WHERE PLAYER_NAME LIKE 'LIONEL MESSİ'


-- FONKSIYONEL COZUM

-- CREATE FUNCTION DBO.GETPLAYERINFO(@PLAYERID AS INT)
-- RETURNS TABLE
-- AS 
-- RETURN
-- (
--     SELECT PLAYER_API_ID,PLAYER_NAME,
--     DATEDIFF(YEAR,BIRTHDATE,GETDATE()),
-- CASE
-- WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) < 20 THEN '20 DEN KUCUK'
-- WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 20 AND 30 THEN '20-30 ARASI'
-- WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 31 AND 40 THEN '31-40 ARASI'
-- WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) >40 THEN '40 DAN BUYUK'
-- END AS AGEGROUP,
-- (SELECT COUNT(*) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID AND PLAYERTYPE='BACKUP')  BACKUPCOUNT ,
-- (SELECT COUNT(*) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID AND PLAYERTYPE='REAL')  REALCOUNT ,
-- (SELECT COUNT(DISTINCT TEAM) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID )  TEAMCOUNT ,
-- (SELECT COUNT(*) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID )  MATCHCOUNT ,
-- (SELECT DATEDIFF(YEAR,MIN(DATE_),MAX(DATE_)) FROM MATCH_PLAYER WHERE PLAYERID=P.PLAYER_API_ID )  PLAYINGYEAR 
-- FROM PLAYERS P 
-- WHERE PLAYER_API_ID=@PLAYERID
-- )

-- SELECT * FROM DBO.GETPLAYERINFO(30893)
-- SELECT * FROM PLAYER P 
-- CROSS APPLY(SELECT * FROM DBO.GETPLAYERINFO(P.PLAYER_API_ID)) I

-- ALISTIRMA 5 

-- CREATE FUNCTION DBO.GETUSERTYPE(@USERID AS INT)
-- RETURNS VARCHAR(20)
-- AS 
-- BEGIN
-- DECLARE @RESULT AS VARCHAR(20)
-- DECLARE @COMMENTCOUNT AS INT
-- DECLARE @POSTCOUNT AS INT

-- IF @POSTCOUNT > @COMMENTCOUNT 
--     SET @RESULT='YAZAR'
-- ELSE 
-- SET @RESULT='YORUMCU'
-- RETURN @RESULT
-- END

-- SELECT * , DBO.GETUSERTYPE(ID) FROM USERS 

-- ALISTIRMA 6  18.05 DE BITTI

-- KULLANDIGIM QUERY 

SELECT  U1.NAMESURNAME,U1.USERNAME_ ,
COUNT(DISTINCT A.ID) ADRESSAYISI,
(SELECT TOP 1 C.CITY TOPLAMALISVERIS FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID 
WHERE U.ID=U1.ID GROUP BY C.CITY ORDER BY SUM(LINETOTAL) DESC) ENCOKALISVERIS,
(SELECT TOP 1 C.CITY  FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID 
WHERE U.ID=U1.ID  ORDER BY  DATE_ DESC ) ENSONALISVERIS,
(SELECT TOP 1 DATE_  FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID 
WHERE U.ID=U1.ID ORDER BY  DATE_ DESC ) SONALISVERISZAMANI,
(SELECT TOP 1 I.ITEMNAME  FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID JOIN ITEMS I ON I.ID=OD.ITEMID
WHERE U.ID=U1.ID ORDER BY  DATE_ DESC ) SONURUN
FROM USERS U1 JOIN ORDERS O ON O.USERID=U1.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID JOIN ITEMS I ON I.ID=OD.ITEMID
GROUP BY U1.ID, U1.NAMESURNAME,U1.USERNAME_   ORDER BY ADRESSAYISI DESC
-- ORDER BY I KEYFI KULLANDIM EN COK ADRESI OLANI GORUP SORGULAMAK ICIN


-- OLUSTURDUGUM FONKSIYON

ALTER FUNCTION DBO.BILGIVER(@USERID AS INT)
RETURNS TABLE 
RETURN(
SELECT  U1.NAMESURNAME,U1.USERNAME_ ,
COUNT(DISTINCT A.ID) ADRESSAYISI,
(SELECT TOP 1 C.CITY TOPLAMALISVERIS FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID 
WHERE U.ID=@USERID GROUP BY C.CITY ORDER BY SUM(LINETOTAL) DESC) ENCOKALISVERIS,
(SELECT TOP 1 C.CITY  FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID 
WHERE U.ID=@USERID  ORDER BY  DATE_ DESC ) ENSONALISVERIS,
(SELECT TOP 1 DATE_  FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID 
WHERE U.ID=@USERID ORDER BY  DATE_ DESC ) SONALISVERISZAMANI,
(SELECT TOP 1 I.ITEMNAME  FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID JOIN ITEMS I ON I.ID=OD.ITEMID
WHERE U.ID=@USERID ORDER BY  DATE_ DESC ) SONURUN
FROM USERS U1 JOIN ORDERS O ON O.USERID=U1.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID JOIN ITEMS I ON I.ID=OD.ITEMID WHERE U1.ID=@USERID
GROUP BY U1.ID, U1.NAMESURNAME,U1.USERNAME_   )


SELECT * FROM DBO.BILGIVER(3133)

DECLARE @I  AS INT = 0

WHILE @I<10
BEGIN
SELECT * FROM DBO.BILGIVER(@I)
SET @I = @I + 1
END

-- BURDA BULDUGUN KISININ DATE VE ITEM KONTROLUNU SAGLADIM
SELECT TOP 1 I.ITEMNAME ,DATE_ FROM USERS U JOIN ORDERS O ON O.USERID=U.ID  JOIN ADDRESS A ON A.ID=O.ADDRESSID JOIN ORDERDETAILS OD  ON OD.ORDERID = O.ID JOIN CITIES C ON C.ID=A.CITYID JOIN ITEMS I ON I.ID=OD.ITEMID
WHERE U.ID=3133 ORDER BY  DATE_ DESC 

-- KURSTAKI CEVAP 

DECLARE @USERID AS INT = 1

DECLARE @RESULT TABLE
( USERID INT , NAMESURNAME VARCHAR(100),USERNAME_ VARCHAR(20) , ADDRESSCOUNT INT,
MOST_ORDERED_CITY VARCHAR(20) , LAST_ORDERED_CITY VARCHAR(20) ,
LAST_ORDERDATE DATETIME,LAST_ITEM VARCHAR(100) )

INSERT INTO @RESULT (USERID, NAMESURNAME, USERNAME_)
    SELECT ID, NAMESURNAME, USERNAME_ 
    FROM USERS 
    WHERE ID = @USERID;

    DECLARE @ADDRESSCOUNT AS INT;
    SELECT @ADDRESSCOUNT = COUNT(*) 
    FROM ADDRESS 
    WHERE USERID = @USERID;

    UPDATE @RESULT 
    SET ADDRESSCOUNT = @ADDRESSCOUNT;

    DECLARE @MOST_ORDERED_CITY AS VARCHAR(30);

    SELECT TOP 1 @MOST_ORDERED_CITY = C.CITY 
    FROM ORDERS O
    JOIN ADDRESS A ON O.ADDRESSID = A.ID
    JOIN CITIES C ON C.ID = A.CITYID
    WHERE O.USERID = @USERID
    GROUP BY C.CITY
    ORDER BY SUM(O.TOTALPRICE) DESC;

    UPDATE @RESULT 
    SET MOST_ORDERED_CITY = @MOST_ORDERED_CITY;

    DECLARE @LAST_ORDERED_CITY AS VARCHAR(20);
    DECLARE @LAST_ORDERDATE DATETIME;
    DECLARE @LAST_ITEM AS VARCHAR(100);

    SELECT TOP 1 
        @LAST_ORDERED_CITY = C.CITY,
        @LAST_ORDERDATE = O.DATE_,
        @LAST_ITEM = I.ITEMNAME
    FROM ORDERS O
    JOIN ADDRESS A ON A.ID = O.ADDRESSID
    JOIN CITIES C ON C.ID = A.CITYID
    JOIN ORDERDETAILS OD ON OD.ORDERID = O.ID
    JOIN ITEMS I ON I.ID = OD.ITEMID
    WHERE O.USERID = @USERID
    ORDER BY O.DATE_ DESC, OD.ID DESC;

    UPDATE @RESULT 
    SET 
        LAST_ORDERED_CITY = @LAST_ORDERED_CITY,
        LAST_ORDERDATE = @LAST_ORDERDATE,
        LAST_ITEM = @LAST_ITEM;


SELECT * FROM @RESULT



CREATE FUNCTION DBO.GETUSERINFO(@USERID AS INT)
RETURNS @RESULT TABLE
(
    USERID INT, 
    NAMESURNAME VARCHAR(100),
    USERNAME_ VARCHAR(20), 
    ADDRESSCOUNT INT,
    MOST_ORDERED_CITY VARCHAR(20), 
    LAST_ORDERED_CITY VARCHAR(20),
    LAST_ORDERDATE DATETIME,
    LAST_ITEM VARCHAR(100)
)
AS
BEGIN 


    INSERT INTO @RESULT (USERID, NAMESURNAME, USERNAME_)
    SELECT ID, NAMESURNAME, USERNAME_ 
    FROM USERS 
    WHERE ID = @USERID;

    DECLARE @ADDRESSCOUNT AS INT;
    SELECT @ADDRESSCOUNT = COUNT(*) 
    FROM ADDRESS 
    WHERE USERID = @USERID;

    UPDATE @RESULT 
    SET ADDRESSCOUNT = @ADDRESSCOUNT;

    DECLARE @MOST_ORDERED_CITY AS VARCHAR(30);

    SELECT TOP 1 @MOST_ORDERED_CITY = C.CITY 
    FROM ORDERS O
    JOIN ADDRESS A ON O.ADDRESSID = A.ID
    JOIN CITIES C ON C.ID = A.CITYID
    WHERE O.USERID = @USERID
    GROUP BY C.CITY
    ORDER BY SUM(O.TOTALPRICE) DESC;

    UPDATE @RESULT 
    SET MOST_ORDERED_CITY = @MOST_ORDERED_CITY;

    DECLARE @LAST_ORDERED_CITY AS VARCHAR(20);
    DECLARE @LAST_ORDERDATE DATETIME;
    DECLARE @LAST_ITEM AS VARCHAR(100);

    SELECT TOP 1 
        @LAST_ORDERED_CITY = C.CITY,
        @LAST_ORDERDATE = O.DATE_,
        @LAST_ITEM = I.ITEMNAME
    FROM ORDERS O
    JOIN ADDRESS A ON A.ID = O.ADDRESSID
    JOIN CITIES C ON C.ID = A.CITYID
    JOIN ORDERDETAILS OD ON OD.ORDERID = O.ID
    JOIN ITEMS I ON I.ID = OD.ITEMID
    WHERE O.USERID = @USERID
    ORDER BY O.DATE_ DESC, OD.ID DESC;

    UPDATE @RESULT 
    SET 
        LAST_ORDERED_CITY = @LAST_ORDERED_CITY,
        LAST_ORDERDATE = @LAST_ORDERDATE,
        LAST_ITEM = @LAST_ITEM;

    RETURN;
END

SELECT * FROM DBO.GETUSERINFO(2)